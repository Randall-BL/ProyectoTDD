module decoder(
    input  logic [1:0]  Op,           // Campo Op de la instrucción
    input  logic [5:0]  Funct,        // Campo Funct de la instrucción
    input  logic [3:0]  Rd,           // Registro destino
    output logic [1:0]  FlagW,        // Write flags
    output logic        PCS,          // PC Source
    output logic        RegW,         // Register write
    output logic        MemW,         // Memory write
    output logic        MemtoReg,     // Memory to register
    output logic [1:0]  ImmSrc,       // Immediate source
    output logic [1:0]  ALUSrc,       // ALU source
    output logic [1:0]  ALUControl    // ALU operation
);

    logic [9:0] controls;
    logic       Branch, ALUOp;

    // Decodificación principal
    always_comb
        case(Op)
            // Data-processing immediate
            2'b00: if (Funct[5])  controls = 10'b0000101001; 
                   else           controls = 10'b0000001001; 
            
            // LDR
            2'b01: if (Funct[0])  controls = 10'b0001111000; 
                   // STR
                   else           controls = 10'b1001110100; 
            
            // B
            2'b10:                controls = 10'b0110100010; 
            
            // Unimplemented
            default:              controls = 10'bx;
        endcase

    // Asignación de señales de control
    assign {RegW, MemW, MemtoReg, Branch, ALUSrc, ImmSrc, ALUOp} = controls;

    // Decodificación de ALU
    always_comb
        if (ALUOp) begin
            case(Funct[4:1])
                4'b0100: ALUControl = 2'b00;  // ADD
                4'b0010: ALUControl = 2'b01;  // SUB
                4'b0000: ALUControl = 2'b10;  // AND
                4'b1100: ALUControl = 2'b11;  // ORR
                default: ALUControl = 2'bx;
            endcase
            
            // Update flags if S bit set
            FlagW[1] = Funct[0];
            FlagW[0] = Funct[0] & (ALUControl == 2'b00 | ALUControl == 2'b01);
        end else begin
            ALUControl = 2'b00;  // ADD for non-DP instructions
            FlagW = 2'b00;       // Don't update flags
        end

    // PC Source
    assign PCS = Branch;

endmodule