module condcheck(
    input  logic [3:0] Cond,     // C贸digo de condici贸n
    input  logic [3:0] Flags,    // Flags NZCV
    output logic       CondEx    // Condici贸n cumplida
);
    logic neg, zero, carry, overflow;  // Flags individuales
    logic ge;                          // Mayor o igual

    // Separar flags
    assign {neg, zero, carry, overflow} = Flags;

    // Calcular GE para comparaciones con signo
    assign ge = (neg == overflow);

    // Evaluar condici贸n
    always_comb
        case(Cond)
            4'b0000: CondEx = zero;             // EQ: Equal
            4'b0001: CondEx = ~zero;            // NE: Not Equal
            4'b0010: CondEx = carry;            // CS/HS: Carry Set
            4'b0011: CondEx = ~carry;           // CC/LO: Carry Clear
            4'b0100: CondEx = neg;              // MI: Minus/Negative
            4'b0101: CondEx = ~neg;             // PL: Plus/Positive
            4'b0110: CondEx = overflow;         // VS: Overflow Set
            4'b0111: CondEx = ~overflow;        // VC: Overflow Clear
            4'b1000: CondEx = carry & ~zero;    // HI: Higher
            4'b1001: CondEx = ~carry | zero;    // LS: Lower or Same
            4'b1010: CondEx = ge;               // GE: Greater or Equal
            4'b1011: CondEx = ~ge;              // LT: Less Than
            4'b1100: CondEx = ~zero & ge;       // GT: Greater Than
            4'b1101: CondEx = zero | ~ge;       // LE: Less or Equal
            4'b1110: CondEx = 1'b1;             // AL: Always
            4'b1111: CondEx = 1'b1;             // AL: Always
        endcase

endmodule