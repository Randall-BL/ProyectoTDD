
module processor_tb();
    // Señales de prueba
    logic        clk;
    logic        reset;

    // Instancia del processor
    processor dut(
        .clk(clk),
        .reset(reset)
    );

    // Generador de reloj
    always begin
        clk = 1; #5;
        clk = 0; #5;
    end

    // Estímulos
    initial begin
        // Inicialización
        reset = 1;
        @(posedge clk);
        #1;
        reset = 0;

        // Mostrar contenido inicial de memorias
        $display("\n=== Inicio de simulación ===");
        $display("Contenido inicial de memoria de instrucciones:");
        for (int i = 0; i < 10; i++) begin
            $display("IMEM[%0d] = %h", i, dut.imem.rom[i]);
        end

        $display("\nContenido inicial de memoria de datos:");
        for (int i = 0; i < 10; i++) begin
            $display("DMEM[%0d] = %h", i, dut.dmem.RAM[i]);
        end

        // Esperar ejecución
        repeat(20) @(posedge clk);  // Ajusta según necesites

        // Mostrar contenido final de memoria de datos
        $display("\n=== Fin de simulación ===");
        $display("Contenido final de memoria de datos:");
        for (int i = 0; i < 10; i++) begin
            $display("DMEM[%0d] = %h", i, dut.dmem.RAM[i]);
        end

        $finish;
    end

    // Monitor de señales importantes
    initial begin
        $monitor("Time=%0t PC=%h Instr=%h ALUResult=%h MemWrite=%b",
                 $time, dut.PC, dut.Instr, dut.ALUResult, dut.MemWrite);
    end

endmodule