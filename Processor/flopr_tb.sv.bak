`timescale 1ns/1ps

module flopr_tb();
    // Parámetros
    localparam WIDTH = 32;
    
    // Señales de prueba
    logic             clk;
    logic             reset;
    logic [WIDTH-1:0] d;
    logic [WIDTH-1:0] q;

    // Instancia del módulo a probar
    flopr #(WIDTH) dut(
        .clk    (clk),
        .reset  (reset),
        .d      (d),
        .q      (q)
    );

    // Generador de reloj
    always begin
        clk = 0; #5;
        clk = 1; #5;
    end

    // Estímulos y verificación
    initial begin
        // Inicialización
        reset = 0;
        d = 0;
        @(posedge clk);

        $display("\n=== Pruebas de Flip-Flop con Reset ===");

        // Prueba 1: Reset
        $display("\nPrueba 1: Reset");
        reset = 1;
        d = 32'hAAAA_AAAA;
        @(posedge clk);
        #1; // Pequeño retardo para estabilización
        $display("reset=%b  d=0x%h  q=0x%h", reset, d, q);
        
        // Prueba 2: Cargar valor después de reset
        $display("\nPrueba 2: Cargar después de reset");
        reset = 0;
        d = 32'h5555_5555;
        @(posedge clk);
        #1;
        $display("reset=%b  d=0x%h  q=0x%h", reset, d, q);
        
        // Prueba 3: Cambios consecutivos
        $display("\nPrueba 3: Cambios consecutivos");
        for (int i = 0; i < 4; i++) begin
            d = $random;  // Valor aleatorio
            @(posedge clk);
            #1;
            $display("reset=%b  d=0x%h  q=0x%h", reset, d, q);
        end
        
        // Prueba 4: Reset mientras hay dato
        $display("\nPrueba 4: Reset con dato presente");
        d = 32'hFFFF_FFFF;
        reset = 1;
        @(posedge clk);
        #1;
        $display("reset=%b  d=0x%h  q=0x%h", reset, d, q);

        $display("\n=== Fin de las pruebas ===\n");
        #10 $finish;
    end

    // Monitor de cambios
    initial begin
        $timeformat(-9, 1, " ns", 10);
        $monitor("Time=%0t reset=%b d=0x%h q=0x%h", 
                 $time, reset, d, q);
    end

endmodule